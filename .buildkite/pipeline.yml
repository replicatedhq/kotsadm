steps:
  ## First, run some pact tests and test everything

  - label: "generate-schema"
    artifact_paths:
      - "migrations/fixtures/schema/fixtures.sql"
    plugins:
      - docker#v3.5.0:
          image: schemahero/schemahero:0.7.2
          always-pull: true
          workdir: /repo
          debug: true
          user: 999
          environment:
            - "uid=999"
          volumes:
            - "./migrations/fixtures:/out"
            - "./migrations/tables:/in"
          command:
            [
              "fixtures",
              "--input-dir",
              "/in",
              "--output-dir",
              "/out/schema",
              "--dbname",
              "ship-cloud",
              "--driver",
              "postgres",
            ]
  - wait
  - commands:
      - buildkite-agent artifact download migrations/fixtures/schema/fixtures.sql . --step generate-schema
      - make -C migrations/fixtures deps build run
    label: "generate-fixtures"
    plugins:
      - docker#v3.5.0:
          image: replicated/gitops-builder:buildkite
          always-pull: true
          workdir: /repo
    artifact_paths:
      - "migrations/fixtures/fixtures.sql"
  - wait
  - commands:
      - buildkite-agent artifact download migrations/fixtures/fixtures.sql . --step generate-fixtures
      - make -C migrations/fixtures publish
    label: "publish fixtures"
    branches: "master"

  # Wait for testing to complete before moving on
  - wait # next is build

  ## migrations
  - label: "build schema migrations"
    commands:
      - make -C migrations schema-alpha
    branches: "master"
  - label: "release schema migrations on tag"
    commands:
      - if [ ! -z "$BUILDKITE_TAG" ]; then make -C migrations schema-release; fi

  ## web
  - label: "test web"
    command: cd web && make deps test && yarn run publish:pact
    plugins:
      - docker#v3.5.0:
          image: replicated/gitops-builder:buildkite
          workdir: /repo/web
          environment:
            - PACT_BROKER_USERNAME
            - PACT_BROKER_PASSWORD
    retry:
      automatic:
        # this command exiting with status 2 typically means that the yarn package failed to download
        - exit_status: 2
          limit: 5

  - label: "build-web"
    commands:
      - make -C web deps build-kotsadm
    plugins:
      - docker#v3.5.0:
          image: replicated/gitops-builder:buildkite
          workdir: /repo/web
          environment:
            - BUILDKITE_COMMIT
            - BUILDKITE_TAG
    artifact_paths:
      - "web/dist/**/*"
    retry:
      automatic:
        # this command exiting with status 2 typically means that the yarn package failed to download
        - exit_status: 2
          limit: 5

  - label: "build-operator"
    command: make -C operator test build
    plugins:
      - docker#v3.5.0:
          always-pull: true
          image: replicated/gitops-builder:buildkite-go12-node10
          workdir: /go/src/github.com/replicatedhq/kotsadm
    artifact_paths:
      - "operator/bin/**/*"
      - "operator/pacts/**/*"

  - label: "build-kurl_proxy"
    command: make -C kurl_proxy test build
    plugins:
      - docker#v3.5.0:
          always-pull: true
          image: replicated/gitops-builder:buildkite-go12-node10
          workdir: /go/src/github.com/replicatedhq/kotsadm
    artifact_paths:
      - "kurl_proxy/bin/**/*"

  ## wait for consumers to finish so that pact tests are in the broker (above here are consumers, below are providers)
  - wait

  ## go api
  - label: "build-go-api"
    commands:
      - make test kotsadm
    plugins:
      - docker#v3.5.0:
          always-pull: true
          image: replicated/gitops-builder:buildkite-go12-node10
          workdir: /go/src/github.com/replicatedhq/kotsadm
    artifact_paths:
      - "./bin/**/*"

  ## typescript api
  - label: "verify pacts"
    commands:
      - docker-compose -f api/test/docker-compose.yml down
      - docker-compose -f api/test/docker-compose.yml pull
      - docker-compose -f api/test/docker-compose.yml build
      - docker-compose -f api/test/docker-compose.yml up --exit-code-from kotsadm-api
      - docker-compose -f api/test/docker-compose.yml down --remove-orphans
  - label: "build typescript api"
    commands:
      - make -C api no-yarn deps build
    plugins:
      - docker#v3.5.0:
          always-pull: true
          image: replicated/gitops-builder:buildkite
          workdir: /repo/api
          environment:
            - "AUTO_CREATE_CLUSTER_TOKEN=this-is-a-test-value"
    artifact_paths:
      - "api/build/**/*"
      - "api/bin/**/*"

  - wait # wait for pacts to finish before checking if they pass

  - commands:
      - make -C api can-i-deploy

  - wait # wait for all builds to be completed before moving on (to the publish steps)

  - label: "go api alpha release"
    commands:
      - mkdir -p bin
      - buildkite-agent artifact download bin/* . --step build-go-api
      - chmod +x bin/kotsadm
      - mkdir web/dist
      - buildkite-agent artifact download web/dist/* . --step build-web
      - make build-alpha
    branches: "master"

  - label: "go api tagged release"
    commands:
      - if [ ! -z "$BUILDKITE_TAG" ]; then mkdir -p bin deploy/bin; fi
      - if [ ! -z "$BUILDKITE_TAG" ]; then buildkite-agent artifact download bin/* . --step build-go-api; fi
      - if [ ! -z "$BUILDKITE_TAG" ]; then cp bin/kotsadm deploy/bin/kotsadm; fi
      - if [ ! -z "$BUILDKITE_TAG" ]; then chmod +x deploy/bin/kotsadm; fi
      - if [ ! -z "$BUILDKITE_TAG" ]; then mkdir -p web/dist; fi
      - if [ ! -z "$BUILDKITE_TAG" ]; then buildkite-agent artifact download web/dist/* . --step build-web; fi
      - if [ ! -z "$BUILDKITE_TAG" ]; then make build-release; fi

  - label: "typescript api alpha release"
    commands:
      - make -C api build-alpha
    branches: "master"

  - label: "typescript api tagged release"
    commands:
      - if [ ! -z "$BUILDKITE_TAG" ]; then make -C api build-release; fi

  - label: "operator alpha release"
    commands:
      - mkdir -p operator/bin
      - buildkite-agent artifact download operator/bin/* . --step build-operator
      - chmod +x operator/bin/kotsadm-operator
      - make -C operator build-alpha
    branches: "master"

  - label: "operator tagged release"
    commands:
      - if [ ! -z "$BUILDKITE_TAG" ]; then mkdir -p operator/bin operator/deploy/bin; fi
      - if [ ! -z "$BUILDKITE_TAG" ]; then buildkite-agent artifact download operator/bin/* . --step build-operator; fi
      - if [ ! -z "$BUILDKITE_TAG" ]; then cp operator/bin/kotsadm-operator operator/deploy/bin/kotsadm-operator; fi
      - if [ ! -z "$BUILDKITE_TAG" ]; then chmod +x operator/deploy/bin/kotsadm-operator; fi
      - if [ ! -z "$BUILDKITE_TAG" ]; then make -C operator build-release; fi

  - label: "kurl_proxy alpha release"
    commands:
      - mkdir -p kurl_proxy/bin
      - buildkite-agent artifact download kurl_proxy/bin/* . --step build-kurl_proxy
      - chmod +x kurl_proxy/bin/kurl_proxy
      - make -C kurl_proxy build-alpha
    branches: "master"

  - label: "kurl_proxy tagged release"
    commands:
      - if [ ! -z "$BUILDKITE_TAG" ]; then mkdir -p kurl_proxy/bin kurl_proxy/bin; fi
      - if [ ! -z "$BUILDKITE_TAG" ]; then buildkite-agent artifact download kurl_proxy/bin/* . --step build-kurl_proxy; fi
      - if [ ! -z "$BUILDKITE_TAG" ]; then chmod +x kurl_proxy/bin/kurl_proxy; fi
      - if [ ! -z "$BUILDKITE_TAG" ]; then make -C kurl_proxy build-release; fi

  - label: "minio alpha release"
    commands:
      - make -C minio publish-latest
    branches: "master"
    agents:
      root-docker: "true"
      queue: root-docker

  - label: "minio tagged release"
    commands:
      - if [ ! -z "$BUILDKITE_TAG" ]; then make -C minio publish-release; fi
    agents:
      root-docker: "true"
      queue: root-docker
